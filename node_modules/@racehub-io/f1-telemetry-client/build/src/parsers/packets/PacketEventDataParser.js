"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketEventDataParser = exports.PenaltyParser = exports.SpeedTrapParser2021 = exports.SpeedTrapParser = exports.ButtonsParser = exports.StartLightsParser = exports.FlashbackParser = exports.FastestLapParser = exports.GenericEventParser = void 0;
const binary_parser_1 = require("binary-parser");
const constants_1 = require("../../constants");
const F1Parser_1 = require("../F1Parser");
const PacketHeaderParser_1 = require("./PacketHeaderParser");
class GenericEventParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint8('vehicleIdx');
    }
}
exports.GenericEventParser = GenericEventParser;
class FastestLapParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint8('vehicleIdx').floatle('lapTime');
    }
}
exports.FastestLapParser = FastestLapParser;
class FlashbackParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little')
            .uint32le('flashbackFrameIdentifier')
            .floatle('flashbackSessionTime');
    }
}
exports.FlashbackParser = FlashbackParser;
class StartLightsParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint8('numLights');
    }
}
exports.StartLightsParser = StartLightsParser;
class ButtonsParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint32le('m_buttonStatus');
    }
}
exports.ButtonsParser = ButtonsParser;
class SpeedTrapParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little').uint8('vehicleIdx').floatle('speed');
    }
}
exports.SpeedTrapParser = SpeedTrapParser;
class SpeedTrapParser2021 extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little')
            .uint8('vehicleIdx')
            .floatle('speed')
            .uint8('overallFastestInSession')
            .uint8('driverFastestInSession');
    }
}
exports.SpeedTrapParser2021 = SpeedTrapParser2021;
class PenaltyParser extends F1Parser_1.F1Parser {
    constructor() {
        super();
        this.endianess('little')
            .uint8('penaltyType')
            .uint8('infringementType')
            .uint8('vehicleIdx')
            .uint8('otherVehicleIdx')
            .uint8('time')
            .uint8('lapNum')
            .uint8('placesGained');
    }
}
exports.PenaltyParser = PenaltyParser;
class PacketEventDataParser extends F1Parser_1.F1Parser {
    data;
    constructor(buffer, packetFormat, bigintEnabled) {
        super();
        this.endianess('little').nest('m_header', {
            type: new PacketHeaderParser_1.PacketHeaderParser(packetFormat, bigintEnabled),
        });
        this.string('m_eventStringCode', { length: 4 });
        if (packetFormat === 2019) {
            this.unpack2019Format(buffer, packetFormat, bigintEnabled);
        }
        if (packetFormat === 2020) {
            this.unpack2020Format(buffer, packetFormat, bigintEnabled);
        }
        if (packetFormat === 2021) {
            this.unpack2021Format(buffer, packetFormat, bigintEnabled);
        }
        this.data = this.fromBuffer(buffer);
    }
    unpack2019Format = (buffer, packetFormat, bigintEnabled) => {
        const eventStringCode = this.getEventStringCode(buffer, packetFormat, bigintEnabled);
        if (eventStringCode === constants_1.EVENT_CODES.FastestLap) {
            this.uint8('vehicleIdx').floatle('lapTime');
        }
        else if (eventStringCode === constants_1.EVENT_CODES.Retirement ||
            eventStringCode === constants_1.EVENT_CODES.TeammateInPits ||
            eventStringCode === constants_1.EVENT_CODES.RaceWinner) {
            this.uint8('vehicleIdx');
        }
    };
    unpack2020Format = (buffer, packetFormat, bigintEnabled) => {
        const eventStringCode = this.getEventStringCode(buffer, packetFormat, bigintEnabled);
        if (eventStringCode === constants_1.EVENT_CODES.FastestLap) {
            this.nest('m_eventDetails', { type: new FastestLapParser() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.Retirement ||
            eventStringCode === constants_1.EVENT_CODES.TeammateInPits ||
            eventStringCode === constants_1.EVENT_CODES.RaceWinner) {
            this.nest('m_eventDetails', { type: new GenericEventParser() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.SpeedTrapTriggered) {
            this.nest('m_eventDetails', { type: new SpeedTrapParser() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.PenaltyIssued) {
            this.nest('m_eventDetails', { type: new PenaltyParser() });
        }
    };
    unpack2021Format = (buffer, packetFormat, bigintEnabled) => {
        const eventStringCode = this.getEventStringCode(buffer, packetFormat, bigintEnabled);
        if (eventStringCode === constants_1.EVENT_CODES.FastestLap) {
            this.nest('m_eventDetails', { type: new FastestLapParser() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.SpeedTrapTriggered) {
            this.nest('m_eventDetails', { type: new SpeedTrapParser2021() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.PenaltyIssued) {
            this.nest('m_eventDetails', { type: new PenaltyParser() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.Flashback) {
            this.nest('m_eventDetails', { type: new FlashbackParser() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.StartLights) {
            this.nest('m_eventDetails', { type: new StartLightsParser() });
        }
        else if (eventStringCode === constants_1.EVENT_CODES.ButtonStatus) {
            this.nest('m_eventDetails', { type: new ButtonsParser() });
        }
        else {
            this.nest('m_eventDetails', { type: new GenericEventParser() });
        }
    };
    getEventStringCode = (buffer, packetFormat, bigintEnabled) => {
        const headerParser = new binary_parser_1.Parser()
            .endianess('little')
            .nest('m_header', {
            type: new PacketHeaderParser_1.PacketHeaderParser(packetFormat, bigintEnabled),
        })
            .string('m_eventStringCode', { length: 4 });
        const { m_eventStringCode } = headerParser.parse(buffer);
        return m_eventStringCode;
    };
}
exports.PacketEventDataParser = PacketEventDataParser;
//# sourceMappingURL=PacketEventDataParser.js.map